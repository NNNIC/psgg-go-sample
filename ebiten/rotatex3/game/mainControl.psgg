;PSGG Editor Backup File
version=1.1
file=mainControl.xlsx
guid=ff885535-b673-49e2-b20c-baad63b8cd8a
;set read_from  excel or psgg
read_from=psgg
;set savemode with_excel or psgg_only
save_mode=psgg_only
;set check_excel_writable yes or no
check_excel_writable=no

------#======*<Guid(D13821FE-FA27-4B04-834C-CEC1E5670F48)>*======#------

sheet=state-chart
nameid_list=,n001,n002,n003,n004,n019,n01e,n005,n01a,,n006,,n007,,n01b,n01c,n01d,n008,n009,n00a,n00b,,n00c,n00d,,n00e,n00f,,n010,n011,,n012,n013,n014,,n016,n017,n018,,,,,
stateid_list=,,,,s0001,s0002,s0025,s0026,s0027,s0028,s0029,s002b,s002c,s002d,s002e,s002f,s0030,s0031,s0032,s0033,s0034,s0035,s0036,s0037,s0038,s0024,s003a,s0039,s003b
max_name_id=30
max_state_id=59
[id_name_dic]
n001=thumbnail
n002=state
n003=state-cmt
n004=state-ref
n005=nextstate
n006=embed
n007=members
n008=vars
n009=init
n00a=init-cmt
n00b=init-ref
n00c=update
n00d=update-cmt
n00e=wait
n00f=wait-cmt
n010=post_wait
n011=post_wait-cmt
n012=branch
n013=branch-cmt
n014=brcond
n016=!dir
n017=!pos
n018=!uuid
n019=state-typ
n01a=gosubstate
n01b=loop_init
n01c=loop_cond
n01d=loop_next
n01e=basestate


[id_state_dic]
s0001=S_START
s0002=S_END
s0024=S_1stRotation
s0025=S_COUNT
s0026=S_2ndRotation
s0027=S_3rdRotation
s0028=S_WAIT
s0029=S_WAIT6
s002b=S_TERMINAL
s002c=S_WAIT1
s002d=S_TERMINAL1
s002e=S_WAIT2
s002f=S_WAIT3
s0030=S_CLEARTERM
s0031=S_WAIT4
s0032=S_RotationOverRay
s0033=S_WAIT5
s0034=S_CHANGEBG
s0035=S_WAIT7
s0036=S_SETBGRED
s0037=S_WAIT8
s0038=S_WAIT9
s0039=S_SETBGBLUE
s003a=S_WAIT10
s003b=S_SETBGGREEN


[s0001]
n002=S_START
n019=start
n005=S_TERMINAL
n016=@@@
/
(100,100)
The root
@@@

n017=13,16
n018=100001

[s0002]
n002=S_END
n019=end
n016=@@@
/
(100,100)
The root
@@@

n017=1401,672
n018=100002

[s0024]
n002=S_1stRotation
n005=S_WAIT
n009=@@@
img, _, err := image.Decode(bytes.NewReader(g.Gophers_jpg()))
if err != nil {
	log.Fatal(err)
}
g.GophersImage, _ = ebiten.NewImageFromImage(img, ebiten.FilterDefault)
drawfunc := func() {
	w, h := g.GophersImage.Size()
	op := &ebiten.DrawImageOptions{}
	// Move the image's center to the screen's upper-left corner.
	// This is a preparation for rotating. When geometry matrices are applied,
	// the origin point is the upper-left corner.
	op.GeoM.Translate(-float64(w)/2, -float64(h)/2)
	// Rotate the image. As a result, the anchor point of this rotate is
	// the center of the image.
	op.GeoM.Rotate(float64(g.Count % 360) * 2 * math.Pi / 360 )
	// Move the image to the screen's center.
	op.GeoM.Translate(float64(g.ScreenWidth/2), float64(g.ScreenHeight/2))
	g.Screen.DrawImage(g.GophersImage, op)
}
g.AddDrawStage(drawfunc)
@@@

n016=@@@
/
(100,100)
The root
@@@

n017=420,672
n018=100003

[s0025]
n001=(bitmap)
n002=S_COUNT
n005=S_WAIT4
n007=var cnt[[state>>lc]] int
n009=cnt[[state>>lc]] = 0
n00c=@@@
g.TermPrint("Count : " + strconv.Itoa(cnt[[state>>lc]]))
cnt[[state>>lc]]++
@@@

n00e=cnt[[state>>lc]] < 100
n010=
n016=@@@
/
(100,100)
The root
@@@

n017=871,12
n018=100004

[s0026]
n002=S_2ndRotation
n005=S_WAIT6
n009=@@@
drawfunc := func() {
	w, h := g.GophersImage.Size()
	op := &ebiten.DrawImageOptions{}
	// Move the image's center to the screen's upper-left corner.
	// This is a preparation for rotating. When geometry matrices are applied,
	// the origin point is the upper-left corner.
	op.GeoM.Translate(-float64(w)/2, -float64(h)/2)
	// Rotate the image. As a result, the anchor point of this rotate is
	// the center of the image.
	op.GeoM.Rotate(float64((g.Count*3)%360) * 2 * math.Pi / 360)
	op.GeoM.Scale(0.5, 0.5)
	// Move the image to the screen's center.
	op.GeoM.Translate(float64(g.ScreenWidth/2), float64(g.ScreenHeight/2))
	g.Screen.DrawImage(g.GophersImage, op)
}
g.AddDrawStage(drawfunc)
@@@

n016=@@@
/
(100,100)
The root
@@@

n017=803,672
n018=100005

[s0027]
n002=S_3rdRotation
n005=S_END
n009=@@@
drawfunc := func() {
	w, h := g.GophersImage.Size()
	op := &ebiten.DrawImageOptions{}
	// Move the image's center to the screen's upper-left corner.
	// This is a preparation for rotating. When geometry matrices are applied,
	// the origin point is the upper-left corner.
	op.GeoM.Translate(-float64(w)/2, -float64(h)/2)
	// Rotate the image. As a result, the anchor point of this rotate is
	// the center of the image.
	op.GeoM.Rotate(float64((g.Count*6)%360) * 2 * math.Pi / 360)
	op.GeoM.Scale(0.2, 0.2)
	// Move the image to the screen's center.
	op.GeoM.Translate(float64(g.ScreenWidth/2), float64(g.ScreenHeight/2))
	g.Screen.DrawImage(g.GophersImage, op)
}
g.AddDrawStage(drawfunc)
@@@

n016=@@@
/
(100,100)
The root
@@@

n017=1191,672
n018=100006

[s0028]
n002=S_WAIT
n005=S_2ndRotation
n007=var time[[state>>lc]] int64
n009=time[[state>>lc]] = g.TimeNowMs() + 1000
n00e=time[[state>>lc]] > g.TimeNowMs()
n016=@@@
/
(100,100)
The root
@@@

n017=610,672
n018=100007

[s0029]
n002=S_WAIT6
n005=S_3rdRotation
n007=var time[[state>>lc]] int64
n009=time[[state>>lc]] = g.TimeNowMs() + 1000
n00e=time[[state>>lc]] > g.TimeNowMs()
n016=@@@
/
(100,100)
The root
@@@

n017=991,672
n018=100008

[s002b]
n001=(bitmap)
n002=S_TERMINAL
n005=S_WAIT1
n009=g.TermPrint("= TERMAINAL TEST = ")
n016=@@@
/
(100,100)
The root
@@@

n017=130,16
n018=100009

[s002c]
n001=(bitmap)
n002=S_WAIT1
n005=S_TERMINAL1
n007=var time[[state>>lc]] int64
n009=time[[state>>lc]] = g.TimeNowMs() + 500
n00e=time[[state>>lc]] > g.TimeNowMs()
n016=@@@
/
(100,100)
The root
@@@

n017=317,17
n018=100010

[s002d]
n002=S_TERMINAL1
n005=S_WAIT2
n009=g.TermPrint("Count 0 to 99")
n016=@@@
/
(100,100)
The root
@@@

n017=504,19
n018=100011

[s002e]
n002=S_WAIT2
n005=S_COUNT
n007=var time[[state>>lc]] int64
n009=time[[state>>lc]] = g.TimeNowMs() + 1500
n00e=time[[state>>lc]] > g.TimeNowMs()
n016=@@@
/
(100,100)
The root
@@@

n017=688,15
n018=100012

[s002f]
n002=S_WAIT3
n005=S_CHANGEBG
n007=var time[[state>>lc]] int64
n009=time[[state>>lc]] = g.TimeNowMs() + 1500
n00e=time[[state>>lc]] > g.TimeNowMs()
n016=@@@
/
(100,100)
The root
@@@

n017=1486,11
n018=100013

[s0030]
n002=S_CLEARTERM
n005=S_WAIT3
n009=g.TermClear()
n016=@@@
/
(100,100)
The root
@@@

n017=1286,13
n018=100014

[s0031]
n002=S_WAIT4
n005=S_CLEARTERM
n007=var time[[state>>lc]] int64
n009=time[[state>>lc]] = g.TimeNowMs() + 1000
n00e=time[[state>>lc]] > g.TimeNowMs()
n016=@@@
/
(100,100)
The root
@@@

n017=1081,12
n018=100015

[s0032]
n002=S_RotationOverRay
n005=S_WAIT5
n009=g.TermPrint("= ROTAION OVERLAY = ")
n016=@@@
/
(100,100)
The root
@@@

n017=48,672
n018=100016

[s0033]
n002=S_WAIT5
n005=S_1stRotation
n007=var time[[state>>lc]] int64
n009=time[[state>>lc]] = g.TimeNowMs() + 1500
n00e=time[[state>>lc]] > g.TimeNowMs()
n016=@@@
/
(100,100)
The root
@@@

n017=232,672
n018=100017

[s0034]
n002=S_CHANGEBG
n005=S_WAIT7
n009=@@@
g.TermPrint("= BACKGROUND COLOR CHANGE =");
@@@

n016=@@@
/
(100,100)
The root
@@@

n017=118,341
n018=100018

[s0035]
n002=S_WAIT7
n005=S_SETBGRED
n007=var time[[state>>lc]] int64
n009=time[[state>>lc]] = g.TimeNowMs() + 500
n00e=time[[state>>lc]] > g.TimeNowMs()
n016=@@@
/
(100,100)
The root
@@@

n017=346,341
n018=100019

[s0036]
n002=S_SETBGRED
n005=S_WAIT8
n009=@@@
drawfunc := func() {
    g.Screen.Fill(color.RGBA{0xff,0,0,0xff})
}
g.AddDrawBg(drawfunc)

@@@

n016=@@@
/
(100,100)
The root
@@@

n017=576,341
n018=100020

[s0037]
n002=S_WAIT8
n005=S_SETBGBLUE
n007=var time[[state>>lc]] int64
n009=time[[state>>lc]] = g.TimeNowMs() + 500
n00e=time[[state>>lc]] > g.TimeNowMs()
n016=@@@
/
(100,100)
The root
@@@

n017=788,341
n018=100021

[s0038]
n002=S_WAIT9
n005=S_SETBGGREEN
n007=var time[[state>>lc]] int64
n009=time[[state>>lc]] = g.TimeNowMs() + 500
n00e=time[[state>>lc]] > g.TimeNowMs()
n016=@@@
/
(100,100)
The root
@@@

n017=1229,341
n018=100022

[s0039]
n002=S_SETBGBLUE
n005=S_WAIT9
n009=@@@
drawfunc := func() {
    g.Screen.Fill(color.RGBA{0x00,0xff,0,0xff})
}
g.AddDrawBg(drawfunc)

@@@

n016=@@@
/
(100,100)
The root
@@@

n017=1017,341
n018=100023

[s003a]
n002=S_WAIT10
n005=S_RotationOverRay
n007=var time[[state>>lc]] int64
n009=time[[state>>lc]] = g.TimeNowMs() + 500
n00e=time[[state>>lc]] > g.TimeNowMs()
n016=@@@
/
(100,100)
The root
@@@

n017=1682,341
n018=100024

[s003b]
n002=S_SETBGGREEN
n005=S_WAIT10
n009=@@@
drawfunc := func() {
    g.Screen.Fill(color.RGBA{0x00,0x00,0xff,0xff})
}
g.AddDrawBg(drawfunc)

@@@

n016=@@@
/
(100,100)
The root
@@@

n017=1470,341
n018=100025



------#======*<Guid(70C5A739-223A-457D-8AEE-1A0E2050D5AE)>*======#------

sheet=config

###VARIOUS-CONTENTS-BEGIN###
; The setting was created automatically. 2020/11/15 0:16:37
; * pssgEditor version : 0.67.10934.5e9bd00bd140bff251fa382ae64c923e1b3b4250
psggfile=@@@
mainControl.psgg
@@@
xlsfile=@@@
mainControl.xlsx
@@@
guid=@@@
ff885535-b673-49e2-b20c-baad63b8cd8a
@@@
bitmap_width=5000
bitmap_height=2000
c_statec_cmt=1
c_thumbnail=1
c_contents=1
force_display_outpin=0
last_action=@@@
init,Saved
@@@
target_pathdir=@@@
/
@@@
state_location_list=@@@

@@@
nodegroup_comment_list=@@@
[{"Key":"\/","Value":""}]
@@@
nodegroup_pos_list=@@@
[{"Key":"\/","Value":{"x":100,"y":100}}]
@@@
fillter_state_location_list=@@@
[{"Key":"\/","Value":[{"Key":"S_START","Value":{"x":13,"y":16}},{"Key":"S_END","Value":{"x":1401,"y":672}},{"Key":"S_0000","Value":{"x":574,"y":359}},{"Key":"S_INIT","Value":{"x":871,"y":12}},{"Key":"S_0001","Value":{"x":966,"y":369}},{"Key":"S_0002","Value":{"x":1345,"y":369}},{"Key":"S_0003","Value":{"x":571,"y":263}},{"Key":"S_0004","Value":{"x":1145,"y":369}},{"Key":"S_0005","Value":{"x":174,"y":274}},{"Key":"S_TERMINAL","Value":{"x":130,"y":16}},{"Key":"S_WAIT","Value":{"x":610,"y":672}},{"Key":"S_WAIT1","Value":{"x":317,"y":17}},{"Key":"S_TERMINAL1","Value":{"x":504,"y":19}},{"Key":"S_WAIT2","Value":{"x":688,"y":15}},{"Key":"S_WAIT3","Value":{"x":1486,"y":11}},{"Key":"S_COUNT","Value":{"x":871,"y":12}},{"Key":"S_WAIT4","Value":{"x":1081,"y":12}},{"Key":"S_CLEARTERM","Value":{"x":1286,"y":13}},{"Key":"S_TERMINAL2","Value":{"x":48,"y":672}},{"Key":"S_WAIT5","Value":{"x":232,"y":672}},{"Key":"S_1stRotation","Value":{"x":420,"y":672}},{"Key":"S_2ndRotation","Value":{"x":803,"y":672}},{"Key":"S_WAIT6","Value":{"x":991,"y":672}},{"Key":"S_3rdRotation","Value":{"x":1191,"y":672}},{"Key":"S_COUNT1","Value":{"x":118,"y":341}},{"Key":"S_CHANGEBG","Value":{"x":118,"y":341}},{"Key":"S_WAIT7","Value":{"x":346,"y":341}},{"Key":"S_WAIT8","Value":{"x":788,"y":341}},{"Key":"S_BGRED","Value":{"x":576,"y":336}},{"Key":"S_CREATEBG","Value":{"x":576,"y":336}},{"Key":"S_SETBGRED","Value":{"x":576,"y":341}},{"Key":"S_WAIT9","Value":{"x":1229,"y":341}},{"Key":"S_SETBGRED1","Value":{"x":1017,"y":325}},{"Key":"S_SETBGBLUE","Value":{"x":1017,"y":341}},{"Key":"S_WAIT10","Value":{"x":1682,"y":341}},{"Key":"S_SETBGBLUE1","Value":{"x":1470,"y":330}},{"Key":"S_SETBGGREEN","Value":{"x":1470,"y":341}},{"Key":"S_RotationOverRay","Value":{"x":48,"y":672}}]}]
@@@
linecolor_data=@@@
[{"color":{"knownColor":0,"name":null,"state":2,"value":4285493103},"pattern":"BACKTO_"}]
@@@
use_external_command=0
external_command=@@@

@@@
source_editor_set=@@@

@@@
label_show=0
label_text=@@@
test
@@@
option_delete_thisstring=1
option_delete_br_string=1
option_delete_bracket_string=1
option_delete_s_state_string=1
option_copy_output_to_clipboard=0
option_convert_with_confirm=0
option_ignore_case_of_state=0
option_editbranch_automode=1
option_use_custom_prefix=0
option_omit_basestate_string=0
option_hide_basestate_contents=1
option_hide_branchcmt_onbranchbox=0
font_name=@@@
MS UI Gothic
@@@
font_size=11
comment_font_size=0
contents_font_size=0
state_width=140
state_height=20
state_short_width=50
state_short_height=20
comment_block_height=20
content_max_height=200
comment_block_fixed=0
line_space=-1
userbutton_title=@@@

@@@
userbutton_command=@@@

@@@
userbutton_callafterconvert=0
itemeditform_size_list=@@@
[{"Key":"init","Value":{"height":656,"width":760}}]
@@@
decoimage_typ_name=@@@
sym
@@@

###VARIOUS-CONTENTS-END###


------#======*<Guid(70C5A739-223A-457D-8AEE-1A0E2050D5AE)>*======#------

sheet=template-source

###VARIOUS-CONTENTS-BEGIN###

###VARIOUS-CONTENTS-END###


------#======*<Guid(70C5A739-223A-457D-8AEE-1A0E2050D5AE)>*======#------

sheet=template-statefunc

###VARIOUS-CONTENTS-BEGIN###
<<<?state/^C_/
eof>>>

/*
    [[state]]
    [[state-cmt]]
*/
<<<?state/^E_/
[[embed]]
eof>>>

<<<?state-typ/^start$/
[[state>>lc]] := func( bFirst  bool ) {
    gotoState(funcId[[nextstate>>lc]])
}
eof>>>

<<<?state-typ/^end$/
[[state>>lc]] := func ( bFirst  bool ) {
     // end of state machine
}
eof>>>

<<<?state-typ/^gosub$/
[[state>>lc]] := func ( bFirst bool ) {
    gosubState(funcId[[gosubstate>>lc]], funcId[[nextstate>>lc]])
}
eof>>>

<<<?state-typ/^subreturn$/
[[state>>lc]] := func ( bFirst bool ) {
    returnState()
}
eof>>>

<<<?state-typ/^loop$/
[[state>>lc]] := func ( bFirst bool ) {
    [[loop_init]]
    gotoState(funcId[[state>>lc]]LoopCheck)
}
[[state>>lc]]LoopCheck := func ( bFirst bool ) {
    if [[loop_cond]] {
        gosubState(funcId[[gosubstate>>lc]], funcId[[state>>lc]]LoopNext)
    } else {
        gotoState(funcId[[nextstate>>lc]])
    }
}
[[state>>lc]]LoopNext := func(bFirst bool ) {
    [[loop_next]]
    gotoState(funcId[[state>>lc]]LoopCheck)
}
eof>>>

[[state>>lc]] := func( bFirst  bool ) {

    [[vars]]

    <<<?init
    if bFirst {
        [[init]]
    }
    >>>

    [[update]]

    <<<?wait
    if [[wait]] {
         return
    }
    >>>

    [[post_wait]]

    [[branch]]

    <<<?nextstate
    if !hasNextState() {
        gotoState(funcId[[nextstate>>lc]])
    }
    >>>
}
###VARIOUS-CONTENTS-END###


------#======*<Guid(70C5A739-223A-457D-8AEE-1A0E2050D5AE)>*======#------

sheet=setting.ini

###VARIOUS-CONTENTS-BEGIN###
[setting]

psgg=mainControl.psgg
xls=mainControl.xlsx
sub_src=
gen_src=mainControl.go

manager_src=
manager_dir=

template_src=
template_func=template-statefunc.txt

help=help.ini
helpweb=@@@
psgg-starter-kit\starterkit2\go\helpweb.html
@@@





kitpath=psgg-starter-kit\starterkit2\go


[setupinfo]

starterkit=@@@
https://github.com/NNNIC/psgg-starter-kit.git 06b417a6f220200aa8489d982802935e37bc35b6
@@@





lang=go
framework=

statemachine=mainControl
prefix=__PREFIX__
xlsdir=@@@
g:\statego\samples\psgg-go-sample\test-ebiten\test9\sm
@@@

gendir=@@@
g:\statego\samples\psgg-go-sample\test-ebiten\test9\sm
@@@

genrdir=.
incrdir=.

code_output_start=[STATEGO OUTPUT START]
code_output_end=[STATEGO OUTPUT END]

; This section has macro defines for converting.

; commentline format  {%0} will be replaced to a comment.




[jpn]

title=GO スタートキット 2020/11/08

detail=@@@
Go 用のステートマシンを作成します。

※サンプルプロジェクトを次のＵＲＬより入手可能。
https://github.com/NNNIC/psgg-go-sample


# ドキュメント用フォルダ
   ステート図ファイルとエディタ起動用ショートカットを格納

      G:\statego\samples\psgg-go-sample\sample

  以下のファイルを作成します。

      mainControl.pssg   --- エディタで次のエクセルファイルを開く。
      mainControl.xlsx   --- ステート図格納用Excelファイル。エディタが編集。

# ソース用フォルダ
　エディタが生成ソースファイル`格納

      G:\statego\samples\psgg-go-sample\sample

  以下のファイルが作成されます。

      mainControl.go  --- Excelファイルからの変換ソースを挿入。


注意 : 既に同名のファイルがある場合は生成されません。
　　　 削除してから生成してください。

@@@







[en]

title=GO STARTER KIT 2020/11/08

detail=@@@
This dialog will create files for a state machine.

* You may get the sample project from the below url.
https://github.com/NNNIC/psgg-go-sample

# Document Folder
　This folder will contain a state chart file and the shortcut of the editor.

      G:\statego\samples\psgg-go-sample\sample

  File:

      mainControl.pssg  --- The editor opens the below excel file.
      mainControl.xlsx  --- Excel File that has a state chart. The editor edits this file.

# Source Folder
   This folder will contain a source file generated by the editor.

      G:\statego\samples\psgg-go-sample\sample

　File:
      mainControl.go   -- the editor will convert from the excel file into this file.

NOTE : If the same name files exists, the file will not be created.
       Please delete the same name files ahead of the creation.


@@@
###VARIOUS-CONTENTS-END###


------#======*<Guid(70C5A739-223A-457D-8AEE-1A0E2050D5AE)>*======#------

sheet=help

###VARIOUS-CONTENTS-BEGIN###
[nextstate]

jpn=次に実行するステートを指定する。
en=Specify the next state to be executed.
[branch]

jpn=@@@
分岐処理を指定する。
１行に一つの分岐命令を書く。
GUIにより上書きされるため引数は適当に指定する。
例）
br_YES(?);
br_NO(?);
br_UNKNOWN(?);
@@@

en=@@@
Specify branch functions.
Each line has a branch function.
Specify a tentavie parameter for each branch function because GUI overwrites the parameter.
i.e)
br_YES(?);
br_NO(?);
br_UNKNOWN(?);
@@@

[update]

jpn=更新処理を指定する。
en=Specify a update process.
[wait]

jpn=@@@
待ち条件を指定する。
true時にループを解除する。
@@@

en=@@@
Specify a waiting condition.
Release the loop if the condition is true.
@@@

[gosubstate]

en=Call Subroutine
jpn=サブルーチン呼出し
[loop_next]

en=Loop increment.
jpn=ループ用インクリメント
[state]

jpn=@@@
ステート名を指定する。
英文字、数字、アンダーバーで構成される。
先頭は英文字およびアンダーバー。
@@@

en=@@@
Specify a state name.
The state name consits of alphabet, number and underbar except that the head characther should be alphabet or a underbar.
@@@

[init]

jpn=初期化用処理を指定する。
en=Specify a initial process.
[post_wait]

jpn='wait'後の処理を指定する。
en=Specify the post process after 'wait'.
[vars]

en=Specify variable definitions.
jpn=変数宣言を指定する。
[nowait]

jpn=@@@
次のステートへ同期待ちをせず実行する時に 'nowait'等を指定する。
同期待ち時には何も指定しない。
@@@

en=@@@
Specify 'nowait' and so on if the next state will be execute without a sync wait.
Do not specify any word wheh the next state will be execute with a sync wait.
@@@

[embed]

en=@@@
For embedding code.
Enable this section if state name starts with "I_".
Disabled state features.
@@@

jpn=@@@
コード埋め込み用。
ステート名がI_時に利用可能。
ステート機能は利用できない。
@@@

[basestate]

en=Set base state
jpn=ベースステートのセット
[!uuid]

jpn=システムがステートのuuid指定に使用。
en=@@@
System uses this for the uuid of the state.
@@@

[state-typ]

en=ステートタイプを指定
[members]

en=@@@
Specify members, variables, classes,  etc.
@@@

jpn=メンバ変数及び関数等を指定する。
[!dir]

jpn=システムがステートのディレクトリ指定に使用。
en=@@@
System uses this for the directory path of the state.
@@@

[loop_init]

en=Loop Initialization
jpn=ループ初期化
[thumbnail]

jpn=説明用のイメージを指定する。
en=@@@
Specify a image for explanation of this state.
@@@

[loop_cond]

en=Loop if the condition is true
jpn=@@@
ループ条件
true時にループする。
@@@
###VARIOUS-CONTENTS-END###


------#======*<Guid(70C5A739-223A-457D-8AEE-1A0E2050D5AE)>*======#------

sheet=itemsinfo

###VARIOUS-CONTENTS-BEGIN###
[inpmethod]

init=
branch-cmt=
state-ref=
wait=
wait-cmt=
embed=
gosubstate=
loop_cond=
branch=
!dir=
post_wait-cmt=
nowait=@@@
*select
nowait
@@@

members=
thumbnail=
update-cmt=
post_wait=
state-cmt=
state-typ=
!pos=
!uuid=
nextstate=
state=
S_=
brcond=
update=
init-cmt=
basestate=
loop_next=
vars=
C_=
E_=
init-ref=
loop_init=
[stateloc]

E_=S1
S_=S0
C_=S2
[itemcond]

state-typ=read_only,exclusion,(S0)
embed=read_only,exclusion,S1
branch=read_only,exclusion,S0
state=read_only,share,S.+
nextstate=read_only,exclusion,S0
return=read_only,exclusion,S0
basestate=read_only,exclusion,(S0)
brcond=read_only,exclusion,S0
thumbnail=read_only,share,S.+
###VARIOUS-CONTENTS-END###



------#======*<Guid(4DC98CBA-6257-4E26-A454-A53F85BC234C)>*======#------


