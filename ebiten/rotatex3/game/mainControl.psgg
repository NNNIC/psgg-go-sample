;PSGG Editor Backup File
version=1.1
file=mainControl.xlsx
guid=ff885535-b673-49e2-b20c-baad63b8cd8a
;set read_from  excel or psgg
read_from=psgg
;set savemode with_excel or psgg_only
save_mode=psgg_only
;set check_excel_writable yes or no
check_excel_writable=no

------#======*<Guid(D13821FE-FA27-4B04-834C-CEC1E5670F48)>*======#------

sheet=state-chart
nameid_list=,n001,n002,n003,n004,n019,n01e,n005,n01a,,n006,,n007,,n01b,n01c,n01d,n008,n009,n00a,n00b,,n00c,n00d,,n00e,n00f,,n010,n011,,n01f,n012,n013,n014,,n016,n017,n018,,,,,,
stateid_list=,,,,s0001,s0002,s0025,s0026,s0027,s0028,s0029,s002b,s002c,s002d,s002e,s002f,s0030,s0031,s0032,s0033,s0034,s0035,s0036,s0037,s0038,s0024,s003a,s0039,s003b,s003d,s003c,s003e,s003f,s0040,s0041,s0042,s0043,s0044,s0045,s0046,s0047,s0048,s0049,s004a,s004b,s004c,s004e,s004d,s004f,s0050,s0052,s0051,s0053,s0054,s0056,s0057,s0059,s0055,s0058,,s005b,,,,s005a
max_name_id=31
max_state_id=91
[id_name_dic]
n001=thumbnail
n002=state
n003=state-cmt
n004=state-ref
n005=nextstate
n006=embed
n007=members
n008=vars
n009=init
n00a=init-cmt
n00b=init-ref
n00c=update
n00d=update-cmt
n00e=wait
n00f=wait-cmt
n010=post_wait
n011=post_wait-cmt
n012=branch
n013=branch-cmt
n014=brcond
n016=!dir
n017=!pos
n018=!uuid
n019=state-typ
n01a=gosubstate
n01b=loop_init
n01c=loop_cond
n01d=loop_next
n01e=basestate
n01f=nowait


[id_state_dic]
s0001=S_START
s0002=S_END
s0024=S_1stRotation
s0025=S_COUNT
s0026=S_2ndRotation
s0027=S_3rdRotation
s0028=S_WAIT
s0029=S_WAIT6
s002b=S_TERMINAL
s002c=S_WAIT1
s002d=S_TERMINAL1
s002e=S_WAIT2
s002f=S_WAIT3
s0030=S_CLEARTERM
s0031=S_WAIT4
s0032=S_RotationOverRay
s0033=S_WAIT5
s0034=S_CHANGEBG
s0035=S_WAIT7
s0036=S_SETBGRED
s0037=S_WAIT8
s0038=S_WAIT9
s0039=S_SETBGBLUE
s003a=S_WAIT10
s003b=S_SETBGGREEN
s003c=S_MENU
s003d=S_BACKTO_MENU
s003e=S_CLEARALL
s003f=S_SHOWMASCOT
s0040=S_WAIT11
s0041=S_LOAD_NIC
s0042=S_FADEINTEST
s0043=S_CLEARALL1
s0044=S_LOP000
s0045=S_SBS000
s0046=S_RET000
s0047=S_PAS000
s0048=S_LOP001
s0049=S_SBS001
s004a=S_RET001
s004b=S_DrawMascot
s004c=S_SETBG
s004d=S_PAS001
s004e=S_FADEOUT
s004f=S_WAIT12
s0050=S_FADEIN
s0051=S_SHOWMASCOT1
s0052=S_PAS002
s0053=S_FADEOUT1
s0054=S_FADEOUT2
s0055=C_MEMO
s0056=S_FADEIN1
s0057=S_DISPLAY_NIC
s0058=S_WAIT_CLRDRAW
s0059=S_DISPLAY_GOPHER
s005a=S_SETBG1
s005b=S_INIT


[s0001]
n002=S_START
n019=start
n005=S_INIT
n016=@@@
/
(100,100)
The root
@@@

n017=30,12
n018=100001

[s0002]
n002=S_END
n019=end
n016=@@@
/
(100,100)
The root
@@@

n017=2325,1212
n018=100002

[s0024]
n002=S_1stRotation
n005=S_WAIT
n009=@@@
if g.GophersImage == nil {
    img, _, err := image.Decode(bytes.NewReader(g.Gophers_jpg()))
    if err != nil {
	log.Fatal(err)
    }
    g.GophersImage, _ = ebiten.NewImageFromImage(img, ebiten.FilterDefault)
}
drawfunc := func() {
	w, h := g.GophersImage.Size()
	op := &ebiten.DrawImageOptions{}
	// Move the image's center to the screen's upper-left corner.
	// This is a preparation for rotating. When geometry matrices are applied,
	// the origin point is the upper-left corner.
	op.GeoM.Translate(-float64(w)/2, -float64(h)/2)
	// Rotate the image. As a result, the anchor point of this rotate is
	// the center of the image.
	op.GeoM.Rotate(float64(g.Count % 360) * 2 * math.Pi / 360 )
	// Move the image to the screen's center.
	op.GeoM.Translate(float64(g.ScreenWidth/2), float64(g.ScreenHeight/2))
	g.Screen.DrawImage(g.GophersImage, op)
}
g.AddDrawStage(drawfunc)
@@@

n016=@@@
/
(100,100)
The root
@@@

n017=802,780
n018=100003

[s0025]
n001=(bitmap)
n002=S_COUNT
n005=S_WAIT4
n007=var cnt[[state>>lc]] int
n009=cnt[[state>>lc]] = 0
n00c=@@@
g.TermPrint("Count : " + strconv.Itoa(cnt[[state>>lc]]))
cnt[[state>>lc]]++
@@@

n00e=cnt[[state>>lc]] < 100
n010=
n016=@@@
/
(100,100)
The root
@@@

n017=1238,188
n018=100004

[s0026]
n002=S_2ndRotation
n005=S_WAIT6
n009=@@@
drawfunc := func() {
	w, h := g.GophersImage.Size()
	op := &ebiten.DrawImageOptions{}
	// Move the image's center to the screen's upper-left corner.
	// This is a preparation for rotating. When geometry matrices are applied,
	// the origin point is the upper-left corner.
	op.GeoM.Translate(-float64(w)/2, -float64(h)/2)
	// Rotate the image. As a result, the anchor point of this rotate is
	// the center of the image.
	op.GeoM.Rotate(float64((g.Count*3)%360) * 2 * math.Pi / 360)
	op.GeoM.Scale(0.5, 0.5)
	// Move the image to the screen's center.
	op.GeoM.Translate(float64(g.ScreenWidth/2), float64(g.ScreenHeight/2))
	g.Screen.DrawImage(g.GophersImage, op)
}
g.AddDrawStage(drawfunc)
@@@

n016=@@@
/
(100,100)
The root
@@@

n017=1185,780
n018=100005

[s0027]
n002=S_3rdRotation
n005=S_BACKTO_MENU
n009=@@@
drawfunc := func() {
	w, h := g.GophersImage.Size()
	op := &ebiten.DrawImageOptions{}
	// Move the image's center to the screen's upper-left corner.
	// This is a preparation for rotating. When geometry matrices are applied,
	// the origin point is the upper-left corner.
	op.GeoM.Translate(-float64(w)/2, -float64(h)/2)
	// Rotate the image. As a result, the anchor point of this rotate is
	// the center of the image.
	op.GeoM.Rotate(float64((g.Count*6)%360) * 2 * math.Pi / 360)
	op.GeoM.Scale(0.2, 0.2)
	// Move the image to the screen's center.
	op.GeoM.Translate(float64(g.ScreenWidth/2), float64(g.ScreenHeight/2))
	g.Screen.DrawImage(g.GophersImage, op)
}
g.AddDrawStage(drawfunc)
@@@

n016=@@@
/
(100,100)
The root
@@@

n017=1573,780
n018=100006

[s0028]
n002=S_WAIT
n005=S_2ndRotation
n007=var time[[state>>lc]] int64
n009=time[[state>>lc]] = g.TimeNowMs() + 1000
n00e=time[[state>>lc]] > g.TimeNowMs()
n016=@@@
/
(100,100)
The root
@@@

n017=992,780
n018=100007

[s0029]
n002=S_WAIT6
n005=S_3rdRotation
n007=var time[[state>>lc]] int64
n009=time[[state>>lc]] = g.TimeNowMs() + 1000
n00e=time[[state>>lc]] > g.TimeNowMs()
n016=@@@
/
(100,100)
The root
@@@

n017=1373,780
n018=100008

[s002b]
n001=(bitmap)
n002=S_TERMINAL
n005=S_WAIT1
n009=g.TermPrint("= TERMAINAL TEST = ")
n016=@@@
/
(100,100)
The root
@@@

n017=497,192
n018=100009

[s002c]
n001=(bitmap)
n002=S_WAIT1
n005=S_TERMINAL1
n007=var time[[state>>lc]] int64
n009=time[[state>>lc]] = g.TimeNowMs() + 500
n00e=time[[state>>lc]] > g.TimeNowMs()
n016=@@@
/
(100,100)
The root
@@@

n017=684,193
n018=100010

[s002d]
n002=S_TERMINAL1
n005=S_WAIT2
n009=g.TermPrint("Count 0 to 99")
n016=@@@
/
(100,100)
The root
@@@

n017=871,195
n018=100011

[s002e]
n002=S_WAIT2
n005=S_COUNT
n007=var time[[state>>lc]] int64
n009=time[[state>>lc]] = g.TimeNowMs() + 1500
n00e=time[[state>>lc]] > g.TimeNowMs()
n016=@@@
/
(100,100)
The root
@@@

n017=1055,191
n018=100012

[s002f]
n002=S_WAIT3
n005=S_BACKTO_MENU
n007=var time[[state>>lc]] int64
n009=time[[state>>lc]] = g.TimeNowMs() + 1500
n00e=time[[state>>lc]] > g.TimeNowMs()
n016=@@@
/
(100,100)
The root
@@@

n017=1853,187
n018=100013

[s0030]
n002=S_CLEARTERM
n005=S_WAIT3
n009=g.TermClear()
n016=@@@
/
(100,100)
The root
@@@

n017=1653,189
n018=100014

[s0031]
n002=S_WAIT4
n005=S_CLEARTERM
n007=var time[[state>>lc]] int64
n009=time[[state>>lc]] = g.TimeNowMs() + 1000
n00e=time[[state>>lc]] > g.TimeNowMs()
n016=@@@
/
(100,100)
The root
@@@

n017=1448,188
n018=100015

[s0032]
n002=S_RotationOverRay
n005=S_WAIT5
n009=g.TermPrint("= ROTAION OVERLAY = ")
n016=@@@
/
(100,100)
The root
@@@

n017=430,780
n018=100016

[s0033]
n002=S_WAIT5
n005=S_1stRotation
n007=var time[[state>>lc]] int64
n009=time[[state>>lc]] = g.TimeNowMs() + 1500
n00e=time[[state>>lc]] > g.TimeNowMs()
n016=@@@
/
(100,100)
The root
@@@

n017=614,780
n018=100017

[s0034]
n002=S_CHANGEBG
n005=S_WAIT7
n009=@@@
g.TermPrint("= BACKGROUND COLOR CHANGE =");
@@@

n016=@@@
/
(100,100)
The root
@@@

n017=440,507
n018=100018

[s0035]
n002=S_WAIT7
n005=S_SETBGRED
n007=var time[[state>>lc]] int64
n009=time[[state>>lc]] = g.TimeNowMs() + 500
n00e=time[[state>>lc]] > g.TimeNowMs()
n016=@@@
/
(100,100)
The root
@@@

n017=668,507
n018=100019

[s0036]
n002=S_SETBGRED
n005=S_WAIT8
n009=@@@
drawfunc := func() {
    g.Screen.Fill(color.RGBA{0xff,0,0,0xff})
}
g.AddDrawBg(drawfunc)

@@@

n016=@@@
/
(100,100)
The root
@@@

n017=898,507
n018=100020

[s0037]
n002=S_WAIT8
n005=S_SETBGBLUE
n007=var time[[state>>lc]] int64
n009=time[[state>>lc]] = g.TimeNowMs() + 500
n00e=time[[state>>lc]] > g.TimeNowMs()
n016=@@@
/
(100,100)
The root
@@@

n017=1110,507
n018=100021

[s0038]
n002=S_WAIT9
n005=S_SETBGGREEN
n007=var time[[state>>lc]] int64
n009=time[[state>>lc]] = g.TimeNowMs() + 500
n00e=time[[state>>lc]] > g.TimeNowMs()
n016=@@@
/
(100,100)
The root
@@@

n017=1551,507
n018=100022

[s0039]
n002=S_SETBGBLUE
n005=S_WAIT9
n009=@@@
drawfunc := func() {
    g.Screen.Fill(color.RGBA{0x00,0xff,0,0xff})
}
g.AddDrawBg(drawfunc)

@@@

n016=@@@
/
(100,100)
The root
@@@

n017=1339,507
n018=100023

[s003a]
n002=S_WAIT10
n005=S_BACKTO_MENU
n007=var time[[state>>lc]] int64
n009=time[[state>>lc]] = g.TimeNowMs() + 500
n00e=time[[state>>lc]] > g.TimeNowMs()
n016=@@@
/
(100,100)
The root
@@@

n017=2004,507
n018=100024

[s003b]
n002=S_SETBGGREEN
n005=S_WAIT10
n009=@@@
drawfunc := func() {
    g.Screen.Fill(color.RGBA{0x00,0x00,0xff,0xff})
}
g.AddDrawBg(drawfunc)

@@@

n016=@@@
/
(100,100)
The root
@@@

n017=1792,507
n018=100025

[s003c]
n002=S_MENU
n009=@@@
g.TermPrint("==== TEST =====")
g.TermPrint("Push 1 ... Termainal Test")
g.TermPrint("Push 2 ... Background Color Change Test")
g.TermPrint("Push 3 ... Ebiten Rotaion Overlay Demo")
g.TermPrint("Push 4 ... StateGo Mascot Demo")
g.TermPrint("Push G ... Gopher vs Nic")
g.TermPrint("Push T ... Try a new feature")
g.TermPrint("")
g.TermPrint("Push C ... Cear all");
g.TermPrint("")
g.TermPrint("PLEASE PUSH KEY!")
@@@

n00c=
n00e=
n012=@@@
brifc(S_TERMINAL);
brelseifc(S_CHANGEBG);
brelseifc(S_RotationOverRay);
brelseifc(S_SHOWMASCOT);
brelseifc(S_SHOWMASCOT1);
brelseifc(S_FADEINTEST);
brelseif(S_CLEARALL);
@@@

n013=@@@
1
2
3
4
G
T
C
@@@

n014=@@@
ebiten.IsKeyPressed(ebiten.Key1)
ebiten.IsKeyPressed(ebiten.Key2)
ebiten.IsKeyPressed(ebiten.Key3)
ebiten.IsKeyPressed(ebiten.Key4)
ebiten.IsKeyPressed(ebiten.KeyG)
ebiten.IsKeyPressed(ebiten.KeyT)
ebiten.IsKeyPressed(ebiten.KeyC)
@@@

n016=@@@
/
(100,100)
The root
@@@

n017=46,221
n018=100026

[s003d]
n002=S_BACKTO_MENU
n005=S_MENU
n016=@@@
/
(100,100)
The root
@@@

n017=335,21
n018=100027

[s003e]
n002=S_CLEARALL
n005=S_BACKTO_MENU
n009=g.ClearAll()
n016=@@@
/
(100,100)
The root
@@@

n017=408,2343
n018=100028

[s003f]
n002=S_SHOWMASCOT
n005=S_WAIT11
n009=@@@
g.TermPrint(" = STATE GO MASCOT DEMO = ")
@@@

n016=@@@
/
(100,100)
The root
@@@

n017=423,1131
n018=100029

[s0040]
n002=S_WAIT11
n005=S_LOAD_NIC
n007=var time[[state>>lc]] int64
n009=time[[state>>lc]] = g.TimeNowMs() + 1500
n00e=time[[state>>lc]] > g.TimeNowMs()
n016=@@@
/
(100,100)
The root
@@@

n017=629,1131
n018=100030

[s0041]
n002=S_LOAD_NIC
n005=S_CLEARALL1
n009=@@@
if g.MascotImage == nil {
    img, _, err := image.Decode(bytes.NewReader(g.Mascot64_png()))
    if err != nil {
	log.Fatal(err)
    }
    g.MascotImage, _ = ebiten.NewImageFromImage(img, ebiten.FilterDefault)
}
drawfunc := func() {
	g.DrawImage(g.MascotImage,8,8,0,1)
}
g.AddDrawStage(drawfunc)
@@@

n016=@@@
/
(100,100)
The root
@@@

n017=838,1135
n018=100031

[s0042]
n001=(bitmap)
n002=S_FADEINTEST
n005=S_FADEOUT
n009=g.TermPrint(" = FADE OUT -> IN = ")
n016=@@@
/
(100,100)
The root
@@@

n017=454,1907
n018=100043

[s0043]
n002=S_CLEARALL1
n005=S_SETBG
n009=g.ClearAll()
n016=@@@
/
(100,100)
The root
@@@

n017=1044,1137
n018=100033

[s0044]
n002=S_LOP000
n019=loop
n005=S_PAS000
n01a=S_SBS000
n007=var loop1 = 0
n01b=loop1 = 0
n01c=loop1 < (g.ScreenWidth / 64)
n01d=loop1++
n016=@@@
/
(100,100)
The root
@@@

n017=1523,1205
n018=100034

[s0045]
n002=S_SBS000
n019=substart
n005=S_LOP001
n016=@@@
/
(100,100)
The root
@@@

n017=1611,1396
n018=100035

[s0046]
n002=S_RET000
n019=subreturn
n016=@@@
/
(100,100)
The root
@@@

n017=2166,1348
n018=100036

[s0047]
n002=S_PAS000
n019=pass
n005=S_BACKTO_MENU
n016=@@@
/
(100,100)
The root
@@@

n017=1917,1176
n018=100037

[s0048]
n002=S_LOP001
n019=loop
n005=S_RET000
n01a=S_SBS001
n007=var loop2 = 0
n01b=loop2 = 0
n01c=loop2 < (g.ScreenHeight / 64)
n01d=loop2++
n016=@@@
/
(100,100)
The root
@@@

n017=1727,1396
n018=100038

[s0049]
n002=S_SBS001
n019=substart
n005=S_DrawMascot
n016=@@@
/
(100,100)
The root
@@@

n017=1821,1497
n018=100039

[s004a]
n002=S_RET001
n019=subreturn
n016=@@@
/
(100,100)
The root
@@@

n017=2143,1499
n018=100040

[s004b]
n001=#8NwQzENG31mrQPGgETFhVg==
n002=S_DrawMascot
n005=S_RET001
n009=@@@
x := loop1
y := loop2
drawfunc := func() {
    g.DrawImage(g.MascotImage, float64(x*64+32),float64(y*64+32),0,1)
}
g.AddDrawStage(drawfunc)
@@@

n016=@@@
/
(100,100)
The root
@@@

n017=1924,1498
n018=100041

[s004c]
n001=(bitmap)
n002=S_SETBG
n005=S_LOP000
n009=@@@
drawfunc := func() {
    g.Screen.Fill(color.RGBA{0,56,133,0xff})
}
g.AddDrawBg(drawfunc)

@@@

n016=@@@
/
(100,100)
The root
@@@

n017=1252,1135
n018=100042

[s004d]
n002=S_PAS001
n019=pass
n005=S_BACKTO_MENU
n016=@@@
/
(100,100)
The root
@@@

n017=1255,1893
n018=100044

[s004e]
n002=S_FADEOUT
n005=S_FADEIN
n007=var goal[[state>>lc]] float64
n008=@@@
fadestepnum := 60.0
col := color.RGBA{255,255,255,255}
@@@

n009=@@@
if g.FadeImage == nil {
    img,_ := ebiten.NewImage(g.ScreenWidth, g.ScreenHeight, ebiten.FilterDefault)
    g.FadeImage = img
}
goal[[state>>lc]] = float64(g.Count) + fadestepnum
drawfunc := func() {
    alpha := (fadestepnum - (goal[[state>>lc]] - float64(g.Count))) / fadestepnum * 255.0
    g.FadeImage.Fill(color.RGBA{col.R,col.G,col.B,g.Clamp255(int(alpha))})
    w, h := g.FadeImage.Size()
    op := &ebiten.DrawImageOptions{}
    op.GeoM.Translate(-float64(w)/2, -float64(h)/2)
    op.GeoM.Translate(float64(g.ScreenWidth/2), float64(g.ScreenHeight/2))
    g.Screen.DrawImage(g.FadeImage, op)
}
g.ClrDrawFe()
g.AddDrawFe(drawfunc)
@@@

n00e=float64(g.Count) < goal[[state>>lc]]
n010=
n016=@@@
/
(100,100)
The root
@@@

n017=673,1908
n018=100045

[s004f]
n002=S_WAIT12
n005=S_PAS001
n007=var time[[state>>lc]] int64
n009=@@@
time[[state>>lc]] = g.TimeNowMs() + 30*1000
@@@

n00c=@@@
x,y := ebiten.CursorPosition()
g.TermPrint(strconv.Itoa(x) + "," + strconv.Itoa(y))
@@@

n00e=time[[state>>lc]] > g.TimeNowMs()
n016=@@@
/
(100,100)
The root
@@@

n017=1061,1910
n018=100046

[s0050]
n002=S_FADEIN
n005=S_WAIT12
n007=var goal[[state>>lc]] float64
n008=@@@
fadestepnum := 60.0
col := color.RGBA{255,255,255,255}
@@@

n009=@@@
if g.FadeImage == nil {
    img,_ := ebiten.NewImage(g.ScreenWidth, g.ScreenHeight, ebiten.FilterDefault)
    g.FadeImage = img
}
goal[[state>>lc]] = float64(g.Count) + fadestepnum
drawfunc := func() {
    alpha := (goal[[state>>lc]] - float64(g.Count)) / fadestepnum * 255.0
    g.FadeImage.Fill(color.RGBA{col.R,col.G,col.B,uint8(g.Clamp255(int(alpha)))})
    w, h := g.FadeImage.Size()
    op := &ebiten.DrawImageOptions{}
    op.GeoM.Translate(-float64(w)/2, -float64(h)/2)
    op.GeoM.Translate(float64(g.ScreenWidth/2), float64(g.ScreenHeight/2))
    g.Screen.DrawImage(g.FadeImage, op)
}
g.ClrDrawFe()
g.AddDrawFe(drawfunc)
@@@

n00e=float64(g.Count) < goal[[state>>lc]]
n016=@@@
/
(100,100)
The root
@@@

n017=884,1913
n018=100047

[s0051]
n002=S_SHOWMASCOT1
n005=S_FADEOUT1
n009=@@@
g.TermPrint(" = STATE GO MASCOT DEMO = ")
@@@

n016=@@@
/Game/
(435,1486)
The root
@@@

n017=368,125
n018=100048

[s0052]
n002=S_PAS002
n019=pass
n005=S_BACKTO_MENU
n016=@@@
/
(100,100)
The root
@@@

n017=1311,1486
n018=100049

[s0053]
n002=S_FADEOUT1
n005=S_SETBG1
n007=var goal[[state>>lc]] float64
n008=@@@
fadestepnum := 60.0
col := color.RGBA{255,255,255,255}
@@@

n009=@@@
if g.FadeImage == nil {
    img,_ := ebiten.NewImage(g.ScreenWidth, g.ScreenHeight, ebiten.FilterDefault)
    g.FadeImage = img
}
goal[[state>>lc]] = float64(g.Count) + fadestepnum
drawfunc := func() {
    alpha := (fadestepnum - (goal[[state>>lc]] - float64(g.Count))) / fadestepnum * 255.0
    g.FadeImage.Fill(color.RGBA{col.R,col.G,col.B,g.Clamp255(int(alpha))})
    w, h := g.FadeImage.Size()
    op := &ebiten.DrawImageOptions{}
    op.GeoM.Translate(-float64(w)/2, -float64(h)/2)
    op.GeoM.Translate(float64(g.ScreenWidth/2), float64(g.ScreenHeight/2))
    g.Screen.DrawImage(g.FadeImage, op)
}
g.ClrDrawFe()
g.AddDrawFe(drawfunc)
@@@

n00e=float64(g.Count) < goal[[state>>lc]]
n016=@@@
/Game/
(435,1486)
The root
@@@

n017=583,126
n018=100050

[s0054]
n002=S_FADEOUT2
n019=pass
n005=S_PAS002
n016=@@@
/Game/
(435,1486)
The root
@@@

n017=2137,120
n018=100051

[s0055]
n002=C_MEMO
n003=Please go to link to view memo.
n004=game-design-memo.txt
n016=@@@
/Game/
(435,1486)
The root
@@@

n017=310,15
n018=100052

[s0056]
n002=S_FADEIN1
n005=S_WAIT_CLRDRAW
n007=var goal[[state>>lc]] float64
n008=@@@
fadestepnum := 60.0
col := color.RGBA{255,255,255,255}
@@@

n009=@@@
if g.FadeImage == nil {
    img,_ := ebiten.NewImage(g.ScreenWidth, g.ScreenHeight, ebiten.FilterDefault)
    g.FadeImage = img
}
goal[[state>>lc]] = float64(g.Count) + fadestepnum
drawfunc := func() {
    alpha := (goal[[state>>lc]] - float64(g.Count)) / fadestepnum * 255.0
    g.FadeImage.Fill(color.RGBA{col.R,col.G,col.B,uint8(g.Clamp255(int(alpha)))})
    w, h := g.FadeImage.Size()
    op := &ebiten.DrawImageOptions{}
    op.GeoM.Translate(-float64(w)/2, -float64(h)/2)
    op.GeoM.Translate(float64(g.ScreenWidth/2), float64(g.ScreenHeight/2))
    g.Screen.DrawImage(g.FadeImage, op)
}
g.ClrDrawFe()
g.AddDrawFe(drawfunc)
@@@

n00e=float64(g.Count) < goal[[state>>lc]]
n016=@@@
/Game/
(435,1486)
The root
@@@

n017=1273,411
n018=100053

[s0057]
n002=S_DISPLAY_NIC
n005=S_DISPLAY_GOPHER
n009=createNic()
n016=@@@
/Game/
(435,1486)
The root
@@@

n017=986,127
n018=100054

[s0058]
n002=S_WAIT_CLRDRAW
n003=@@@
毎フレームDrawBgListをクリア
６０秒待つ
@@@

n005=
n007=var time[[state>>lc]] int64
n009=@@@
time[[state>>lc]] = g.TimeNowMs() + 60*1000
@@@

n00c=g.ClrDrawStage()
n00e=
n012=@@@
brifc(S_FADEOUT2);
brelseif(S_FADEOUT2);
@@@

n013=@@@
ESC
TIME OUT
@@@

n014=@@@
ebiten.IsKeyPressed(ebiten.KeyEscape)
time[[state>>lc]] < g.TimeNowMs()
@@@

n016=@@@
/Game/
(435,1486)
The root
@@@

n017=1537,136
n018=100056

[s0059]
n002=S_DISPLAY_GOPHER
n005=S_FADEIN1
n009=createGopher()
n016=@@@
/Game/
(435,1486)
The root
@@@

n017=1203,127
n018=100057

[s005a]
n002=S_SETBG1
n005=S_DISPLAY_NIC
n009=@@@
drawfunc := func() {
    g.Screen.Fill(color.RGBA{0,56,133,0xff})
}
g.AddDrawBg(drawfunc)

@@@

n016=@@@
/Game/
(435,1486)
The root
@@@

n017=852,452
n018=100058

[s005b]
n002=S_INIT
n005=S_MENU
n009=g.ClearAll()
n016=@@@
/
(100,100)

@@@

n017=147,12
n018=100060



------#======*<Guid(70C5A739-223A-457D-8AEE-1A0E2050D5AE)>*======#------

sheet=config

###VARIOUS-CONTENTS-BEGIN###
; The setting was created automatically. 2020/11/21 13:04:04
; * pssgEditor version : 0.67.24339.no hash because of debug
psggfile=@@@
mainControl.psgg
@@@
xlsfile=@@@
mainControl.xlsx
@@@
guid=@@@
ff885535-b673-49e2-b20c-baad63b8cd8a
@@@
bitmap_width=2500
bitmap_height=4000
c_statec_cmt=1
c_thumbnail=1
c_contents=1
force_display_outpin=0
last_action=@@@
varied,Edited a state.
@@@
target_pathdir=@@@
/
@@@
state_location_list=@@@

@@@
nodegroup_comment_list=@@@
[{"Key":"\/","Value":"The root"},{"Key":"\/Game\/","Value":""}]
@@@
nodegroup_pos_list=@@@
[{"Key":"\/","Value":{"x":100,"y":100}},{"Key":"\/Game\/","Value":{"x":435,"y":1486}}]
@@@
fillter_state_location_list=@@@
[{"Key":"\/","Value":[{"Key":"S_START","Value":{"x":30,"y":12}},{"Key":"S_END","Value":{"x":2325,"y":1212}},{"Key":"S_TERMINAL","Value":{"x":497,"y":192}},{"Key":"S_WAIT","Value":{"x":992,"y":780}},{"Key":"S_WAIT1","Value":{"x":684,"y":193}},{"Key":"S_TERMINAL1","Value":{"x":871,"y":195}},{"Key":"S_WAIT2","Value":{"x":1055,"y":191}},{"Key":"S_WAIT3","Value":{"x":1853,"y":187}},{"Key":"S_COUNT","Value":{"x":1238,"y":188}},{"Key":"S_WAIT4","Value":{"x":1448,"y":188}},{"Key":"S_CLEARTERM","Value":{"x":1653,"y":189}},{"Key":"S_WAIT5","Value":{"x":614,"y":780}},{"Key":"S_1stRotation","Value":{"x":802,"y":780}},{"Key":"S_2ndRotation","Value":{"x":1185,"y":780}},{"Key":"S_WAIT6","Value":{"x":1373,"y":780}},{"Key":"S_3rdRotation","Value":{"x":1573,"y":780}},{"Key":"S_CHANGEBG","Value":{"x":440,"y":507}},{"Key":"S_WAIT7","Value":{"x":668,"y":507}},{"Key":"S_WAIT8","Value":{"x":1110,"y":507}},{"Key":"S_SETBGRED","Value":{"x":898,"y":507}},{"Key":"S_WAIT9","Value":{"x":1551,"y":507}},{"Key":"S_SETBGBLUE","Value":{"x":1339,"y":507}},{"Key":"S_WAIT10","Value":{"x":2004,"y":507}},{"Key":"S_SETBGGREEN","Value":{"x":1792,"y":507}},{"Key":"S_RotationOverRay","Value":{"x":430,"y":780}},{"Key":"S_MENU","Value":{"x":46,"y":221}},{"Key":"S_BACKTO_MENU","Value":{"x":335,"y":21}},{"Key":"S_CLEARALL","Value":{"x":408,"y":2343}},{"Key":"S_CLEARALL1","Value":{"x":1044,"y":1137}},{"Key":"S_SHOWMASCOT","Value":{"x":423,"y":1131}},{"Key":"S_WAIT11","Value":{"x":629,"y":1131}},{"Key":"S_LOAD_SHOW","Value":{"x":838,"y":1135}},{"Key":"S_LOP000","Value":{"x":1523,"y":1205}},{"Key":"S_SBS000","Value":{"x":1611,"y":1396}},{"Key":"S_RET000","Value":{"x":2166,"y":1348}},{"Key":"S_PAS000","Value":{"x":1917,"y":1176}},{"Key":"S_LOP001","Value":{"x":1727,"y":1396}},{"Key":"S_SBS001","Value":{"x":1821,"y":1497}},{"Key":"S_RET001","Value":{"x":2143,"y":1499}},{"Key":"S_DrawMascot","Value":{"x":1924,"y":1498}},{"Key":"S_SETBG","Value":{"x":1252,"y":1135}},{"Key":"S_FADEINTEST","Value":{"x":454,"y":1907}},{"Key":"S_PAS001","Value":{"x":1255,"y":1893}},{"Key":"S_FADEOUT","Value":{"x":673,"y":1908}},{"Key":"S_WAIT12","Value":{"x":1061,"y":1910}},{"Key":"S_FADEIN","Value":{"x":884,"y":1913}},{"Key":"S_SHOWMASCOT1","Value":{"x":440,"y":1490}},{"Key":"S_PAS002","Value":{"x":1311,"y":1486}},{"Key":"S_FADEOUT1","Value":{"x":673,"y":1491.6665}},{"Key":"S_FADEOUT2","Value":{"x":1077.33337,"y":1487.66675}},{"Key":"____altnative_state____Game","Value":{"x":435,"y":1486}},{"Key":"S_LOAD_NIC","Value":{"x":838,"y":1135}},{"Key":"S_START1","Value":{"x":147,"y":12}},{"Key":"S_INIT","Value":{"x":147,"y":12}}]},{"Key":"\/Game\/","Value":[{"Key":"S_MENU","Value":{"x":50,"y":100}},{"Key":"S_SHOWMASCOT1","Value":{"x":368,"y":125}},{"Key":"S_PAS002","Value":{"x":2353,"y":105}},{"Key":"S_FADEOUT1","Value":{"x":583,"y":126}},{"Key":"S_FADEOUT2","Value":{"x":2137,"y":120}},{"Key":"C_MEMO","Value":{"x":310,"y":15}},{"Key":"S_FADEIN1","Value":{"x":1273,"y":411}},{"Key":"S_DISPLAY_NIC","Value":{"x":986,"y":127}},{"Key":"S_WAIT13","Value":{"x":1605,"y":138}},{"Key":"S_WAIT_CLRDRAW","Value":{"x":1537,"y":136}},{"Key":"S_DISPLAY_GOPHER","Value":{"x":1203,"y":127}},{"Key":"C_DISPLAY_NIC","Value":{"x":996,"y":46}},{"Key":"S_SETBG1","Value":{"x":852,"y":452}}]}]
@@@
linecolor_data=@@@
[{"color":{"knownColor":0,"name":null,"state":2,"value":4285493103},"pattern":"BACKTO_"}]
@@@
use_external_command=0
external_command=@@@

@@@
source_editor_set=@@@

@@@
label_show=0
label_text=@@@
test
@@@
option_delete_thisstring=1
option_delete_br_string=1
option_delete_bracket_string=1
option_delete_s_state_string=1
option_copy_output_to_clipboard=0
option_convert_with_confirm=0
option_ignore_case_of_state=0
option_editbranch_automode=1
option_use_custom_prefix=0
option_omit_basestate_string=0
option_hide_basestate_contents=1
option_hide_branchcmt_onbranchbox=0
font_name=@@@
MS UI Gothic
@@@
font_size=11
comment_font_size=0
contents_font_size=0
state_width=140
state_height=20
state_short_width=50
state_short_height=20
comment_block_height=20
content_max_height=200
comment_block_fixed=0
line_space=-1
userbutton_title=@@@

@@@
userbutton_command=@@@

@@@
userbutton_callafterconvert=0
itemeditform_size_list=@@@
[{"Key":"init","Value":{"height":656,"width":760}},{"Key":"nowait","Value":{"height":398,"width":330}},{"Key":"post_wait","Value":{"height":398,"width":760}}]
@@@
decoimage_typ_name=@@@
sym
@@@

###VARIOUS-CONTENTS-END###


------#======*<Guid(70C5A739-223A-457D-8AEE-1A0E2050D5AE)>*======#------

sheet=template-source

###VARIOUS-CONTENTS-BEGIN###

###VARIOUS-CONTENTS-END###


------#======*<Guid(70C5A739-223A-457D-8AEE-1A0E2050D5AE)>*======#------

sheet=template-statefunc

###VARIOUS-CONTENTS-BEGIN###
<<<?state/^C_/
eof>>>

/*
    [[state]]
    [[state-cmt]]
*/
<<<?state/^E_/
[[embed]]
eof>>>

<<<?state-typ/^start$/
[[state>>lc]] := func( bFirst  bool ) {
    gotoState(funcId[[nextstate>>lc]])
}
eof>>>

<<<?state-typ/^pass$/
[[state>>lc]] := func( bFirst  bool ) {
    gotoState(funcId[[nextstate>>lc]])
    noWait()
}
eof>>>

<<<?state-typ/^end$/
[[state>>lc]] := func ( bFirst  bool ) {
     // end of state machine
}
eof>>>

<<<?state-typ/^gosub$/
[[state>>lc]] := func ( bFirst bool ) {
    gosubState(funcId[[gosubstate>>lc]], funcId[[nextstate>>lc]])
    noWait()
}
eof>>>

<<<?state-typ/^subreturn$/
[[state>>lc]] := func ( bFirst bool ) {
    returnState()
    noWait()
}
eof>>>

<<<?state-typ/^loop$/
[[state>>lc]] := func ( bFirst bool ) {
    [[loop_init]]
    gotoState(funcId[[state>>lc]]LoopCheck)
    noWait()
}
[[state>>lc]]LoopCheck := func ( bFirst bool ) {
    if [[loop_cond]] {
        gosubState(funcId[[gosubstate>>lc]], funcId[[state>>lc]]LoopNext)
    } else {
        gotoState(funcId[[nextstate>>lc]])
    }
    noWait()
}
[[state>>lc]]LoopNext := func(bFirst bool ) {
    [[loop_next]]
    gotoState(funcId[[state>>lc]]LoopCheck)
    noWait()
}
eof>>>

[[state>>lc]] := func( bFirst  bool ) {

    [[vars]]

    <<<?init
    if bFirst {
        [[init]]
    }
    >>>

    [[update]]

    <<<?wait
    if [[wait]] {
         return
    }
    >>>

    [[post_wait]]

    [[branch]]

    <<<?nextstate
    if !hasNextState() {
        gotoState(funcId[[nextstate>>lc]])
    }
    >>>
    <<<?nowait
    if hasNextState() {
        noWait()
    }
    >>>
}
###VARIOUS-CONTENTS-END###


------#======*<Guid(70C5A739-223A-457D-8AEE-1A0E2050D5AE)>*======#------

sheet=setting.ini

###VARIOUS-CONTENTS-BEGIN###
[setting]

psgg=mainControl.psgg
xls=mainControl.xlsx
sub_src=
gen_src=mainControl.go

manager_src=
manager_dir=

template_src=
template_func=template-statefunc.txt

help=help.ini
helpweb=@@@
psgg-starter-kit\starterkit2\go\helpweb.html
@@@





kitpath=psgg-starter-kit\starterkit2\go


[setupinfo]

starterkit=@@@
https://github.com/NNNIC/psgg-starter-kit.git 06b417a6f220200aa8489d982802935e37bc35b6
@@@





lang=go
framework=

statemachine=mainControl
prefix=__PREFIX__
xlsdir=@@@
g:\statego\samples\psgg-go-sample\test-ebiten\test9\sm
@@@

gendir=@@@
g:\statego\samples\psgg-go-sample\test-ebiten\test9\sm
@@@

genrdir=.
incrdir=.

code_output_start=[STATEGO OUTPUT START]
code_output_end=[STATEGO OUTPUT END]

; This section has macro defines for converting.




; commentline format  {%0} will be replaced to a comment.







[jpn]

title=GO スタートキット 2020/11/08

detail=@@@
Go 用のステートマシンを作成します。

※サンプルプロジェクトを次のＵＲＬより入手可能。
https://github.com/NNNIC/psgg-go-sample


# ドキュメント用フォルダ
   ステート図ファイルとエディタ起動用ショートカットを格納

      G:\statego\samples\psgg-go-sample\sample

  以下のファイルを作成します。

      mainControl.pssg   --- エディタで次のエクセルファイルを開く。
      mainControl.xlsx   --- ステート図格納用Excelファイル。エディタが編集。

# ソース用フォルダ
　エディタが生成ソースファイル`格納

      G:\statego\samples\psgg-go-sample\sample

  以下のファイルが作成されます。

      mainControl.go  --- Excelファイルからの変換ソースを挿入。


注意 : 既に同名のファイルがある場合は生成されません。
　　　 削除してから生成してください。

@@@







[en]

title=GO STARTER KIT 2020/11/08

detail=@@@
This dialog will create files for a state machine.

* You may get the sample project from the below url.
https://github.com/NNNIC/psgg-go-sample

# Document Folder
　This folder will contain a state chart file and the shortcut of the editor.

      G:\statego\samples\psgg-go-sample\sample

  File:

      mainControl.pssg  --- The editor opens the below excel file.
      mainControl.xlsx  --- Excel File that has a state chart. The editor edits this file.

# Source Folder
   This folder will contain a source file generated by the editor.

      G:\statego\samples\psgg-go-sample\sample

　File:
      mainControl.go   -- the editor will convert from the excel file into this file.

NOTE : If the same name files exists, the file will not be created.
       Please delete the same name files ahead of the creation.


@@@
###VARIOUS-CONTENTS-END###


------#======*<Guid(70C5A739-223A-457D-8AEE-1A0E2050D5AE)>*======#------

sheet=help

###VARIOUS-CONTENTS-BEGIN###
[nextstate]

jpn=次に実行するステートを指定する。
en=Specify the next state to be executed.
[branch]

jpn=@@@
分岐処理を指定する。
１行に一つの分岐命令を書く。
GUIにより上書きされるため引数は適当に指定する。
例）
br_YES(?);
br_NO(?);
br_UNKNOWN(?);
@@@

en=@@@
Specify branch functions.
Each line has a branch function.
Specify a tentavie parameter for each branch function because GUI overwrites the parameter.
i.e)
br_YES(?);
br_NO(?);
br_UNKNOWN(?);
@@@

[update]

jpn=更新処理を指定する。
en=Specify a update process.
[wait]

jpn=@@@
待ち条件を指定する。
true時にループを解除する。
@@@

en=@@@
Specify a waiting condition.
Release the loop if the condition is true.
@@@

[gosubstate]

en=Call Subroutine
jpn=サブルーチン呼出し
[loop_next]

en=Loop increment.
jpn=ループ用インクリメント
[state]

jpn=@@@
ステート名を指定する。
英文字、数字、アンダーバーで構成される。
先頭は英文字およびアンダーバー。
@@@

en=@@@
Specify a state name.
The state name consits of alphabet, number and underbar except that the head characther should be alphabet or a underbar.
@@@

[init]

jpn=初期化用処理を指定する。
en=Specify a initial process.
[post_wait]

jpn='wait'後の処理を指定する。
en=Specify the post process after 'wait'.
[vars]

en=Specify variable definitions.
jpn=変数宣言を指定する。
[nowait]

en=
jpn=
[embed]

en=@@@
For embedding code.
Enable this section if state name starts with "I_".
Disabled state features.
@@@

jpn=@@@
コード埋め込み用。
ステート名がI_時に利用可能。
ステート機能は利用できない。
@@@

[basestate]

en=Set base state
jpn=ベースステートのセット
[!uuid]

jpn=システムがステートのuuid指定に使用。
en=@@@
System uses this for the uuid of the state.
@@@

[state-typ]

en=ステートタイプを指定
[members]

en=@@@
Specify members, variables, classes,  etc.
@@@

jpn=メンバ変数及び関数等を指定する。
[!dir]

jpn=システムがステートのディレクトリ指定に使用。
en=@@@
System uses this for the directory path of the state.
@@@

[loop_init]

en=Loop Initialization
jpn=ループ初期化
[thumbnail]

jpn=説明用のイメージを指定する。
en=@@@
Specify a image for explanation of this state.
@@@

[loop_cond]

en=Loop if the condition is true
jpn=@@@
ループ条件
true時にループする。
@@@
###VARIOUS-CONTENTS-END###


------#======*<Guid(70C5A739-223A-457D-8AEE-1A0E2050D5AE)>*======#------

sheet=itemsinfo

###VARIOUS-CONTENTS-BEGIN###
[inpmethod]

init=
branch-cmt=
state-ref=
wait=
wait-cmt=
embed=
gosubstate=
loop_cond=
branch=
!dir=
post_wait-cmt=
nowait=@@@
*select
nowait
@@@

members=
thumbnail=
update-cmt=
post_wait=
state-cmt=
state-typ=
!pos=
!uuid=
nextstate=
state=
S_=
brcond=
update=
init-cmt=
basestate=
loop_next=
vars=
C_=
E_=
init-ref=
loop_init=
[stateloc]

E_=S1
S_=S0
C_=S2
[itemcond]

state-typ=read_only,exclusion,(S0)
embed=read_only,exclusion,S1
branch=read_only,exclusion,S0
state=read_only,share,S.+
nextstate=read_only,exclusion,S0
return=read_only,exclusion,S0
basestate=read_only,exclusion,(S0)
brcond=read_only,exclusion,S0
thumbnail=read_only,share,S.+
###VARIOUS-CONTENTS-END###



------#======*<Guid(4DC98CBA-6257-4E26-A454-A53F85BC234C)>*======#------

hash=#8NwQzENG31mrQPGgETFhVg==

###BITMAP-DATA-BEGIN###

###BITMAP-DATA-END###


